From deee70c87a22c80def6ed2aa133d410aa697dc89 Mon Sep 17 00:00:00 2001
From: Stefan Berger <stefanb@linux.ibm.com>
Date: Sat, 1 Jan 2022 17:50:21 -0500
Subject: [PATCH 16/20] ima: Move ima_namespace structure definition to public
 header file

The basic integrity subsystem will need access to the ima_namespace
structure when the keyrings are moved into the IMA namespace, so move
the structure into the public header.

Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>
---
 include/linux/ima.h                 |  2 -
 include/linux/integrity_namespace.h | 71 +++++++++++++++++++++++++++++
 kernel/user.c                       |  2 +-
 security/integrity/ima/ima.h        | 58 +----------------------
 4 files changed, 73 insertions(+), 60 deletions(-)
 create mode 100644 include/linux/integrity_namespace.h

diff --git a/include/linux/ima.h b/include/linux/ima.h
index 7b9713b290ae..b12ed00e8944 100644
--- a/include/linux/ima.h
+++ b/include/linux/ima.h
@@ -15,8 +15,6 @@
 #include <crypto/hash_info.h>
 struct linux_binprm;
 
-extern struct ima_namespace init_ima_ns;
-
 #ifdef CONFIG_IMA
 extern enum hash_algo ima_get_current_hash_algo(void);
 extern int ima_bprm_check(struct linux_binprm *bprm);
diff --git a/include/linux/integrity_namespace.h b/include/linux/integrity_namespace.h
new file mode 100644
index 000000000000..2eb5ee2cfd30
--- /dev/null
+++ b/include/linux/integrity_namespace.h
@@ -0,0 +1,71 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * Copyright (C) 2021 IBM Corporation
+ * Author: Stefan Berger <stefanb@us.ibm.com>
+ */
+
+#ifndef _LINUX_INTEGRITY_NAMESPACE_H
+#define _LINUX_INTEGRITY_NAMESPACE_H
+
+#if CONFIG_IMA
+
+#define IMA_HASH_BITS 10
+#define IMA_MEASURE_HTABLE_SIZE (1 << IMA_HASH_BITS)
+
+struct ima_h_table {
+	atomic_long_t len;	/* number of stored measurements in the list */
+	atomic_long_t violations;
+	struct hlist_head queue[IMA_MEASURE_HTABLE_SIZE];
+};
+
+struct ima_namespace {
+	struct rb_root ns_status_tree;
+	rwlock_t ns_tree_lock;
+	struct kmem_cache *ns_status_cache;
+
+	struct list_head ima_default_rules;
+	/* ns's policy rules */
+	struct list_head ima_policy_rules;
+	struct list_head ima_temp_rules;
+	/* Pointer to ns's current policy */
+	struct list_head __rcu *ima_rules;
+	/* current content of the policy */
+	int ima_policy_flag;
+
+	struct ima_h_table ima_htable;
+	struct list_head ima_measurements;
+	unsigned long binary_runtime_size;
+	/* mutex protects atomicity of extending measurement list
+	 * and extending the TPM PCR aggregate. Since tpm_extend can take
+	 * long (and the tpm driver uses a mutex), we can't use the spinlock.
+	 */
+	struct mutex ima_extend_list_mutex;
+
+	/* IMA's filesystem */
+	struct mutex ima_write_mutex;
+	unsigned long ima_fs_flags;
+	int valid_policy;
+
+	struct dentry *policy_dentry;
+	bool policy_dentry_removed;
+
+	/* TPM and hash algo related */
+	struct tpm_chip *ima_tpm_chip;
+	struct tpm_digest *digests;
+	struct ima_algo_desc *ima_algo_array;
+	int ima_sha1_idx;
+	int ima_hash_algo_idx;
+	/*
+	 * Additional number of slots reserved, as needed, for SHA1
+	 * and IMA default algo.
+	 */
+	int ima_extra_slots;
+
+	struct crypto_shash *ima_shash_tfm;
+	struct crypto_ahash *ima_ahash_tfm;
+} __randomize_layout;
+extern struct ima_namespace init_ima_ns;
+
+#endif /* CONFIG_IMA */
+
+#endif /* _LINUX_INTEGRITY_NAMESPACE_H */
diff --git a/kernel/user.c b/kernel/user.c
index e5d1f4b9b8ba..af5a483f9419 100644
--- a/kernel/user.c
+++ b/kernel/user.c
@@ -19,7 +19,7 @@
 #include <linux/export.h>
 #include <linux/user_namespace.h>
 #include <linux/proc_ns.h>
-#include <linux/ima.h>
+#include <linux/integrity_namespace.h>
 
 /*
  * userns count is 1 for root user, 1 for init_uts_ns,
diff --git a/security/integrity/ima/ima.h b/security/integrity/ima/ima.h
index 5f1ae34f212b..d2c95e8e785d 100644
--- a/security/integrity/ima/ima.h
+++ b/security/integrity/ima/ima.h
@@ -21,6 +21,7 @@
 #include <linux/tpm.h>
 #include <linux/audit.h>
 #include <linux/user_namespace.h>
+#include <linux/integrity_namespace.h>
 #include <crypto/hash_info.h>
 
 #include "../integrity.h"
@@ -33,9 +34,6 @@ enum tpm_pcrs { TPM_PCR0 = 0, TPM_PCR8 = 8, TPM_PCR10 = 10 };
 #define IMA_DIGEST_SIZE		SHA1_DIGEST_SIZE
 #define IMA_EVENT_NAME_LEN_MAX	255
 
-#define IMA_HASH_BITS 10
-#define IMA_MEASURE_HTABLE_SIZE (1 << IMA_HASH_BITS)
-
 #define IMA_TEMPLATE_FIELD_ID_MAX_LEN	16
 #define IMA_TEMPLATE_NUM_FIELDS_MAX	15
 
@@ -113,60 +111,6 @@ struct ima_kexec_hdr {
 	u64 count;
 };
 
-struct ima_h_table {
-	atomic_long_t len;	/* number of stored measurements in the list */
-	atomic_long_t violations;
-	struct hlist_head queue[IMA_MEASURE_HTABLE_SIZE];
-};
-
-struct ima_namespace {
-	struct rb_root ns_status_tree;
-	rwlock_t ns_tree_lock;
-	struct kmem_cache *ns_status_cache;
-
-	struct list_head ima_default_rules;
-	/* ns's policy rules */
-	struct list_head ima_policy_rules;
-	struct list_head ima_temp_rules;
-	/* Pointer to ns's current policy */
-	struct list_head __rcu *ima_rules;
-	/* current content of the policy */
-	int ima_policy_flag;
-
-	struct ima_h_table ima_htable;
-	struct list_head ima_measurements;
-	unsigned long binary_runtime_size;
-	/* mutex protects atomicity of extending measurement list
-	 * and extending the TPM PCR aggregate. Since tpm_extend can take
-	 * long (and the tpm driver uses a mutex), we can't use the spinlock.
-	 */
-	struct mutex ima_extend_list_mutex;
-
-	/* IMA's filesystem */
-	struct mutex ima_write_mutex;
-	unsigned long ima_fs_flags;
-	int valid_policy;
-
-	struct dentry *policy_dentry;
-	bool policy_dentry_removed;
-
-	/* TPM and hash algo related */
-	struct tpm_chip *ima_tpm_chip;
-	struct tpm_digest *digests;
-	struct ima_algo_desc *ima_algo_array;
-	int ima_sha1_idx;
-	int ima_hash_algo_idx;
-	/*
-	 * Additional number of slots reserved, as needed, for SHA1
-	 * and IMA default algo.
-	 */
-	int ima_extra_slots;
-
-	struct crypto_shash *ima_shash_tfm;
-	struct crypto_ahash *ima_ahash_tfm;
-} __randomize_layout;
-extern struct ima_namespace init_ima_ns;
-
 extern const int read_idmap[];
 
 #ifdef CONFIG_HAVE_IMA_KEXEC
-- 
2.31.1

