From e3bab00c9ba1aa4f1d326c958d3f216ab5ebd37d Mon Sep 17 00:00:00 2001
From: Stefan Berger <stefanb@linux.ibm.com>
Date: Sat, 1 Jan 2022 23:36:12 -0500
Subject: [PATCH 18/20] integrity: Move keyring_name array into
 integrity_namespace

Move the keyring_name array into integrity_namespace and initialize it
there for the host as before. Also initialize it for the integrity
namespaces where keyring names prefixed with "_" are always going to be
used.

Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>
---
 include/linux/integrity_namespace.h |  1 +
 security/integrity/digsig.c         | 19 ++++---------------
 security/integrity/integrity_ns.c   | 14 ++++++++++++++
 3 files changed, 19 insertions(+), 15 deletions(-)

diff --git a/include/linux/integrity_namespace.h b/include/linux/integrity_namespace.h
index 60cdad4f1349..866b1724062f 100644
--- a/include/linux/integrity_namespace.h
+++ b/include/linux/integrity_namespace.h
@@ -17,6 +17,7 @@
 
 struct integrity_namespace {
 	struct key *keyring[INTEGRITY_KEYRING_MAX];
+	const char *keyring_name[INTEGRITY_KEYRING_MAX];
 };
 extern struct integrity_namespace init_integrity_ns;
 
diff --git a/security/integrity/digsig.c b/security/integrity/digsig.c
index 89ddf5218766..b26c5b74492a 100644
--- a/security/integrity/digsig.c
+++ b/security/integrity/digsig.c
@@ -20,17 +20,6 @@
 
 #include "integrity.h"
 
-static const char * const keyring_name[INTEGRITY_KEYRING_MAX] = {
-#ifndef CONFIG_INTEGRITY_TRUSTED_KEYRING
-	"_evm",
-	"_ima",
-#else
-	".evm",
-	".ima",
-#endif
-	".platform",
-};
-
 #ifdef CONFIG_IMA_KEYRINGS_PERMIT_SIGNED_BY_BUILTIN_OR_SECONDARY
 #define restrict_link_to_ima restrict_link_by_builtin_and_secondary_trusted
 #else
@@ -45,10 +34,10 @@ static struct key *integrity_keyring_from_id(struct integrity_namespace *ns,
 
 	if (!ns->keyring[id]) {
 		ns->keyring[id] =
-			request_key(&key_type_keyring, keyring_name[id], NULL);
+			request_key(&key_type_keyring, ns->keyring_name[id], NULL);
 		if (IS_ERR(ns->keyring[id])) {
 			int err = PTR_ERR(ns->keyring[id]);
-			pr_err("no %s keyring: %d\n", keyring_name[id], err);
+			pr_err("no %s keyring: %d\n", ns->keyring_name[id], err);
 			ns->keyring[id] = NULL;
 			return ERR_PTR(err);
 		}
@@ -103,13 +92,13 @@ static int __init __integrity_init_keyring(struct integrity_namespace *ns,
 	const struct cred *cred = current_cred();
 	int err = 0;
 
-	ns->keyring[id] = keyring_alloc(keyring_name[id], KUIDT_INIT(0),
+	ns->keyring[id] = keyring_alloc(ns->keyring_name[id], KUIDT_INIT(0),
 					KGIDT_INIT(0), cred, perm,
 					KEY_ALLOC_NOT_IN_QUOTA, restriction, NULL);
 	if (IS_ERR(ns->keyring[id])) {
 		err = PTR_ERR(ns->keyring[id]);
 		pr_info("Can't allocate %s keyring (%d)\n",
-			keyring_name[id], err);
+			ns->keyring_name[id], err);
 		ns->keyring[id] = NULL;
 	} else {
 		if (id == INTEGRITY_KEYRING_PLATFORM)
diff --git a/security/integrity/integrity_ns.c b/security/integrity/integrity_ns.c
index eb09d9567182..14f5644b3505 100644
--- a/security/integrity/integrity_ns.c
+++ b/security/integrity/integrity_ns.c
@@ -13,6 +13,16 @@ static struct kmem_cache *integrityns_cachep;
 
 struct integrity_namespace init_integrity_ns = {
 	.keyring = {NULL, },
+        .keyring_name = {
+#ifndef CONFIG_INTEGRITY_TRUSTED_KEYRING
+		"_evm",
+		"_ima",
+#else
+		".evm",
+		".ima",
+#endif
+		".platform",
+	},
 };
 EXPORT_SYMBOL(init_integrity_ns);
 
@@ -24,6 +34,10 @@ struct integrity_namespace *integrity_create_ns(void)
 	if (!ns)
 		return ERR_PTR(-ENOMEM);
 
+	ns->keyring_name[INTEGRITY_KEYRING_EVM] = "_evm";
+	ns->keyring_name[INTEGRITY_KEYRING_IMA] = "_ima";
+	ns->keyring_name[INTEGRITY_KEYRING_PLATFORM] = "";
+
 	return ns;
 }
 
-- 
2.31.1

