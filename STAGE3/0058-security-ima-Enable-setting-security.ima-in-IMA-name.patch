From 4e97213d37a585714a5185e07089860d772c0875 Mon Sep 17 00:00:00 2001
From: Stefan Berger <stefanb@linux.ibm.com>
Date: Thu, 6 Jan 2022 19:49:50 -0500
Subject: [PATCH 58/90] security/ima: Enable setting security.ima in IMA
 namespace

Modify cap_inode_setxattr() and cap_inode_removexattr() so that the
evaluation of capabilities required to access security.ima is deferred to
ima_inode_setxattr() and ima_inode_removexattr() respectively if
CONFIG_IMA_NS is enabled as well as CONFIG_IMA_APPRAISE (avoid the
simple stub function)

Modify ima_protect_xattr(), which is called by ima_inode_setxattr() and
ima_inode_removexattr(), so that the capabilities are evaluated there.
Add the ns_capable() check previously executed by cap_inode_setxattr() to
this function. Further, for allowing setting the IMA xattr inside an IMA
namespace, also allow to use CAP_MAC_ADMIN so that regular users spawning
an IMA namespace can also sign files in the IMA namespace if those files
have owner and group mappings in the user namespace.
If both CAP_SYS_ADMIN and CAP_MAC_ADMIN are missing in an IMA namespace,
or of the file owner and group cannot be mapped then writing and removing
of security.ima xattr is not possible.

Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>
---
 security/commoncap.c                  | 23 +++++++++++++++++++++++
 security/integrity/ima/ima_appraise.c | 16 +++++++++++++---
 2 files changed, 36 insertions(+), 3 deletions(-)

diff --git a/security/commoncap.c b/security/commoncap.c
index 0b3fc2f3afe7..33020cbab120 100644
--- a/security/commoncap.c
+++ b/security/commoncap.c
@@ -1003,6 +1003,17 @@ int cap_inode_setxattr(struct dentry *dentry, const char *name,
 	if (strcmp(name, XATTR_NAME_CAPS) == 0)
 		return 0;
 
+	/*
+	 * If IMA namespacing is enabled then setting security.ima is allowed
+	 * for users as well and the check for XATTR_NAME_IMA will be done in
+	 * ima_inode_setxattr() once CONIG_IMA_APPRAISE is set.
+	 */
+	if (IS_ENABLED(CONFIG_IMA_NS)) {
+		if (IS_ENABLED(CONFIG_IMA_APPRAISE) &&
+		    strcmp(name, XATTR_NAME_IMA) == 0)
+			return 0;
+	}
+
 	if (!ns_capable(user_ns, CAP_SYS_ADMIN))
 		return -EPERM;
 	return 0;
@@ -1047,6 +1058,18 @@ int cap_inode_removexattr(struct mnt_idmap *idmap,
 		return 0;
 	}
 
+	/*
+	 * If IMA namespacing is enabled then removing security.ima is allowed
+	 * for users as well and the check for XATTR_NAME_IMA will be done in
+	 * ima_inode_removexattr() once CONIG_IMA_APPRAISE is set.
+	 */
+	if (IS_ENABLED(CONFIG_IMA_NS)) {
+		if (IS_ENABLED(CONFIG_IMA_APPRAISE) &&
+		    strcmp(name, XATTR_NAME_IMA) == 0)
+			return 0;
+	}
+
+
 	if (!ns_capable(user_ns, CAP_SYS_ADMIN))
 		return -EPERM;
 	return 0;
diff --git a/security/integrity/ima/ima_appraise.c b/security/integrity/ima/ima_appraise.c
index 776b237a4d67..84a5287e716c 100644
--- a/security/integrity/ima/ima_appraise.c
+++ b/security/integrity/ima/ima_appraise.c
@@ -702,10 +702,20 @@ void ima_inode_post_setattr(struct mnt_idmap *idmap,
 static int ima_protect_xattr(struct dentry *dentry, const char *xattr_name,
 			     const void *xattr_value, size_t xattr_value_len)
 {
+	struct user_namespace *user_ns = dentry->d_sb->s_user_ns;
+	struct inode *inode = d_backing_inode(dentry);
+	struct mnt_idmap *idmap = &nop_mnt_idmap; // FIXME: idmap must be parameter to this function
+
 	if (strcmp(xattr_name, XATTR_NAME_IMA) == 0) {
-		if (!capable(CAP_SYS_ADMIN))
-			return -EPERM;
-		return 1;
+		if (ns_capable(user_ns, CAP_SYS_ADMIN) ||
+		    capable(CAP_SYS_ADMIN))
+			return 1;
+		/* Allow users to set security.ima in user namespace */
+		if (mac_admin_ns_capable(current_user_ns()) &&
+		    privileged_wrt_inode_uidgid(current_user_ns(),
+						idmap, inode))
+			return 1;
+		return -EPERM;
 	}
 	return 0;
 }
-- 
2.37.3

