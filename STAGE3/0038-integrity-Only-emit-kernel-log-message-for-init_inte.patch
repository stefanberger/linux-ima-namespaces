From 3265b181b14094449d39aa882ea94a9845c9564e Mon Sep 17 00:00:00 2001
From: Stefan Berger <stefanb@linux.ibm.com>
Date: Mon, 31 Jan 2022 12:02:41 -0500
Subject: [PATCH 38/63] integrity: Only emit kernel log message for
 init_integrity_ns

Only emit kernel error log message when init_integrity_ns is the
namespace causing the error.

Signed-off-by: Stefan Berger <stefanb@linux.ibm.com>
---
 security/integrity/digsig.c            |  4 +++-
 security/integrity/digsig_asymmetric.c | 10 ++++++++--
 2 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/security/integrity/digsig.c b/security/integrity/digsig.c
index c2a605c63b81..e5db011aa5cd 100644
--- a/security/integrity/digsig.c
+++ b/security/integrity/digsig.c
@@ -49,7 +49,9 @@ static struct key *integrity_keyring_from_id(struct integrity_namespace *ns,
 			request_key(&key_type_keyring, keyring_name[id], NULL);
 		if (IS_ERR(ns->keyring[id])) {
 			int err = PTR_ERR(ns->keyring[id]);
-			pr_err("no %s keyring: %d\n", keyring_name[id], err);
+			if (ns == &init_integrity_ns)
+				pr_err("no %s keyring: %d\n", keyring_name[id],
+				       err);
 			ns->keyring[id] = NULL;
 			return ERR_PTR(err);
 		}
diff --git a/security/integrity/digsig_asymmetric.c b/security/integrity/digsig_asymmetric.c
index 895f4b9ce8c6..1fbb027a203e 100644
--- a/security/integrity/digsig_asymmetric.c
+++ b/security/integrity/digsig_asymmetric.c
@@ -9,6 +9,7 @@
 #include <linux/err.h>
 #include <linux/ratelimit.h>
 #include <linux/key-type.h>
+#include <linux/integrity_namespace.h>
 #include <crypto/public_key.h>
 #include <crypto/hash_info.h>
 #include <keys/asymmetric-type.h>
@@ -21,6 +22,7 @@
  */
 static struct key *request_asymmetric_key(struct key *keyring, uint32_t keyid)
 {
+	struct integrity_namespace *ns = current_integrity_ns();
 	struct key *key;
 	char name[12];
 
@@ -35,7 +37,9 @@ static struct key *request_asymmetric_key(struct key *keyring, uint32_t keyid)
 		kref = keyring_search(make_key_ref(key, 1),
 				      &key_type_asymmetric, name, true);
 		if (!IS_ERR(kref)) {
-			pr_err("Key '%s' is in ima_blacklist_keyring\n", name);
+			if (ns == &init_integrity_ns)
+				pr_err("Key '%s' is in ima_blacklist_keyring\n",
+				       name);
 			return ERR_PTR(-EKEYREJECTED);
 		}
 	}
@@ -54,7 +58,7 @@ static struct key *request_asymmetric_key(struct key *keyring, uint32_t keyid)
 		key = request_key(&key_type_asymmetric, name, NULL);
 	}
 
-	if (IS_ERR(key)) {
+	if (IS_ERR(key) && ns == &init_integrity_ns) {
 		if (keyring)
 			pr_err_ratelimited("Request for unknown key '%s' in '%s' keyring. err %ld\n",
 					   name, keyring->description,
@@ -62,7 +66,9 @@ static struct key *request_asymmetric_key(struct key *keyring, uint32_t keyid)
 		else
 			pr_err_ratelimited("Request for unknown key '%s' err %ld\n",
 					   name, PTR_ERR(key));
+	}
 
+	if (IS_ERR(key)) {
 		switch (PTR_ERR(key)) {
 			/* Hide some search errors */
 		case -EACCES:
-- 
2.35.1

